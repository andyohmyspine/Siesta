#include "SourceGenerator.h"

#include <ranges>

SSourceGenerator::SSourceGenerator(const DParsedFolderData& FolderData)
	: m_FolderData(FolderData)
{

}

static bool HasMetaSpecifier(const TString& Specifier, const auto& Range)
{
	return std::ranges::find_if(Range, [&Specifier](const auto& Elem) { return Elem == Specifier; }) != Range.end();
}

PVector<DSourceText> SSourceGenerator::GenerateSources()
{
	PVector<DSourceText> Output;

	PHashMap<TString, PVector<DParsedTypeInfo>> FileToTypeMap;

	for (const auto& Type : m_FolderData.Types)
	{
		FileToTypeMap[Type.File].push_back(Type);
	}

	for (const TString& FileName : FileToTypeMap | std::views::keys)
	{
		TStringStream SourceStream;
		SourceStream << "// This file was generated by Siesta.ReflectionTool. DO NOT MODIFY - IT'S POINTLESS. It will be regenerated on the next build.\n\n";
		SourceStream << FormatString("#include \"SiestaCore.h\"\n");
		SourceStream << FormatString("#include \"TypeRegistry.h\"\n");

		for (const auto& Type : FileToTypeMap.at(FileName))
		{
			const bool IsAbstract = HasMetaSpecifier("abstract", Type.MetaSpecifiers);

			SourceStream << FormatString("SType* {}::GetStaticType()", Type.Name) << "{ static SType* Out = STypeRegistry::GetType(\"" << Type.Name << "\"); return Out; }\n";

			// Create type
			SourceStream << FormatString("class SType_{} : public SType\n", Type.Name);
			SourceStream << "{\n";
			{

				SourceStream << FormatString("public:\n\tSType_{}()", Type.Name);
				// Constructor
				SourceStream << "\t{\n";
				{
					SourceStream << FormatString("\t\tm_Name = \"{}\";\n", Type.Name);
					SourceStream << FormatString("\t\tm_Instantiate = [](const SObjectInfo& ObjectInfo)");

					if (!IsAbstract)
					{
						SourceStream << '{' << " return new " << Type.Name << "(ObjectInfo);" << " };\n";
					}
					else
					{
						SourceStream << '{' << " Debug::Critical(\"Cannot instantiate abstract type.\"); return nullptr; };\n"; 
					}
				}
				SourceStream << "\t}\n";

			}
			SourceStream << "};\n";
			// Type registrar
			SourceStream << FormatString("SIESTA_REGISTER_OBJECT_TYPE({})\n", Type.Name);
		}

		DSourceText SourceText
		{
			.FileName = FileName,
			.FileText = SourceStream.str()
		};
		Output.push_back(SourceText);
	}

	return Output;
}

